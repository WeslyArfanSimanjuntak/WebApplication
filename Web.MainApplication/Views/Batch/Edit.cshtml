@model Repository.Application.DataModel.BATCH

@{
    ViewBag.Title = "Edit";
}

<div class="box box-solid">
    <div class="box-header with-border">
        <h3 class="box-title">
            Edit - Batch
        </h3>
    </div>
    <!-- /.box-header -->
    <div class="box-body">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.BatchCode)
                <div class="form-group">
                    @Html.LabelFor(model => model.BatchCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBox("BatchCodeDisplay", Model.BatchCode, htmlAttributes: new { @class = "form-control", @readonly = "true" })
                        @Html.ValidationMessageFor(model => model.BatchCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.BatchName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BatchName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BatchName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RawProduct, "RawProduct", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("RawProduct", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.RawProduct, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-2 control-label">
                        <input type="button" id="btnDelete" value="Delete" class="btn btn-default" />
                        <input type="button" id="btnAdd" value="Add" class="btn btn-default" />
                    </div>
                    <div class="col-md-10">
                        <label id="lblTotalProductMature" class="h4"></label>
                        @Html.Hidden("totalComposedProduct")
                    </div>
                </div>
                <div id="productMatureList">
                    @{int counter = 1;
                        List<SelectList> listSelect = new List<SelectList>();
                        foreach (var item in Model.BatchProduct.OrderBy(x => x.ProductPercentage))
                        {

                            listSelect.Add(new SelectList(((SelectList)ViewBag.MatureProduct).ToList(), "Value", "Text", item.ProductId));

                            <div id="MatureProductFormChild_@counter">
                                <div class="form-group">
                                    @Html.Label("", "Composed Product " + counter, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("ComposedProductChild_" + counter.ToString(), listSelect.ElementAt(counter - 1), new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.RawProduct, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.RawProduct, "Percentage ", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextBox("ProductPercentageChild_" + counter, item.ProductPercentage, htmlAttributes: new { @class = "form-control", @required = "required", @maxlength = "6" })
                                        @Html.ValidationMessageFor(model => model.RawProduct, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            counter++;
                        }

                    }

                </div>


                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
                        }

        <div class="box-footer">
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
</div>

<script type="text/javascript">
    (function ($) {
        $("#totalComposedProduct").val($("#productMatureList").children().length);
        @{ for (int a = 0; a <= Model.BatchProduct.Count;a++) {
                <text> $("#ProductPercentageChild_@a").number(true, 2);</text>

            }
            }

        $("#lblTotalProductMature").html("Total Product : <strong>" + $("#productMatureList").children().length + "</strong>");

        $("#btnAdd").on("click", function () {
            $("#productMatureList").append($("#MatureProductFormChild_1").clone());
            $("#lblTotalProductMature").html("Total Product : <strong>" + $("#productMatureList").children().length + "</strong>");
            $("#productMatureList").children().last().attr("id", "MatureProductFormChild_" + $("#productMatureList").children().length);
            $("#productMatureList").children().last().find("label:first").html("Composed Product " + $("#productMatureList").children().length);
            $("#productMatureList").children().last().find("select:first").attr("name", "ComposedProductChild_" + $("#productMatureList").children().length).attr("id", "ComposedProductChild_" + $("#productMatureList").children().length).val("");
            $("#productMatureList").children().last().find("input:first").attr("name", "ProductPercentageChild_" + $("#productMatureList").children().length).attr("id", "ProductPercentageChild_" + $("#productMatureList").children().length).val("").number(true, 2);
            $("#MatureProductFormChild_" + $("#productMatureList").children().length).find("input:first").attr("name" + "ProductPercentageChild_" + $("#productMatureList").children().length);
            $("#totalComposedProduct").val($("#productMatureList").children().length);
            //if ($("#MatureProductFormChild_" + $("#productMatureList").children().length).find("input:first") == undefined || $("#MatureProductFormChild_" + $("#productMatureList").children().length).find("input:first") == null) {
            //    alert("kossong");
            //} else {
            //    console.log($("#MatureProductFormChild_" + $("#productMatureList").children().length).find("input:first"));
            //    alert("ada isi");
            //}
            ////
        });

        $("#btnDelete").on("click", function () {
            if ($("#productMatureList").children().length > 1) {
                $("#productMatureList").children().last().remove();
            }

            $("#lblTotalProductMature").html("Total Product : <strong>" + $("#productMatureList").children().length + "</strong>");
            $("#totalComposedProduct").val($("#productMatureList").children().length);

        });
    }(jQuery));
</script>