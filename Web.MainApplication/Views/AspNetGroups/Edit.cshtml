@model Repository.Application.DataModel.AspNetGroups
@{
    var roles = (List<Repository.Application.DataModel.AspNetRoles>)ViewBag.Roles;
    var dictionaryRoles = new Dictionary<string, string>();
    roles.ForEach(x =>
    {
        dictionaryRoles.Add(x.Id.ToString(), x.AspNetRoles2 != null ? x.AspNetRoles2.Name + " ---- " + x.Name : x.Name);
    });

}
<div class="box box-solid">
    <div class="box-header with-border">
        <h3 class="box-title">
            Edit - Group
        </h3>
    </div>
    <!-- /.box-header -->
    <div class="box-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.GroupName)

            <div class="form-group">
                @Html.LabelFor(model => model.GroupDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.GroupDescription, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.GroupDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("IsActive", null, htmlAttributes: new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">

                @Html.Label("Roles", htmlAttributes: new { @class = "control-label col-md-2" })

                <div class="col-md-10">
                    @{
                        foreach (var item in dictionaryRoles.OrderBy(x => x.Value))
                        {
                            <label>
                                @Html.CheckBox(item.Key, Model.AspNetRoleGroup.Where(x => x.RolesId.ToString() == item.Key).FirstOrDefault() != null ? true : false)
                                @{
                                    if (Model.AspNetRoleGroup.Where(x => x.RolesId.ToString() == item.Key).FirstOrDefault() != null)
                                    {
                                        @Html.Label(item.Value, htmlAttributes: new { @style = "color:#00a65a" })
                                    }
                                    else
                                    {

                                        @Html.Label(item.Value, htmlAttributes: new { @style = "color:#dd4b39" })
                                    }
                                }
                            </label>
                            <br />
                        }
                    }
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
</div>
