@model Repository.Application.DataModel.ProductMixing

@{
    ViewBag.Title = "MixProduct";
}
<div class="box box-solid">
    <div class="box-header with-border">
        <h3 class="box-title">
            Create - Product Transaction Mixing
        </h3>
    </div>
    <!-- /.box-header -->
    <div class="box-body">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductMixingNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ProductMixingNumber, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ProductMixingNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Site, "Site", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("Site", null, htmlAttributes: new { @required = "required", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Site, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BatchMixCode, "BatchMixCode", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("BatchMixCode", null, htmlAttributes: new { @required = "required", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BatchMixCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Outcome Product", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.Hidden("OutcomeProudct", Model.OutcomeProudct)
                        @Html.TextBox("OutcomeProudctDetail", null, htmlAttributes: new { @readonly = "readonly", @required = "required", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OutcomeProudct, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Ammount, new { htmlAttributes = new { @required = "required", @class = "form-control money-format2" } })
                        @Html.ValidationMessageFor(model => model.Ammount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MixingTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MixingTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MixingTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MixedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MixedBy, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MixedBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }

    </div>
    <div class="box-footer">
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
<script type="text/javascript">

    $(document).ready(function () {

        $('#MixingTime').datetimepicker({
            format: 'DD/MM/YYYY HH:mm:ss'
        });

        $("#BatchMixCode").on("change", function () {

            var selectedBatchMix = $("#BatchMixCode").val();

            if (selectedBatchMix != "") {
                AjaxCall(function (output) {

                    console.log(output);
                    $.each(output.data, function (key, value) {

                        //$("#SourceProudct").append('<option value="' + value["EMPLOYEEID"] + '">' + value["EMPLOYEEID"] + " - " + value["EMPLOYEEFULLNAME"] + '</option>');
                        AjaxCall(function (outpute) {
                            console.log(outpute);
                            $.each(outpute.data, function (keye, valuee) {
                                $("#OutcomeProudct").val(valuee["PRODUCTID"]);
                                $("#OutcomeProudctDetail").val(valuee["PRODUCTID"] + " - " + valuee["PRODUCTNAME"]);
                            });

                        }, entityApiUrl + '?entitas=PRODUCT&filter=PRODUCTID=="' + value["OutputProduct"] + '"');
                    });

                }, entityApiUrl + '?entitas=BatchMix&filter=BatchMixCode=="' + selectedBatchMix + '"');



            }


        });
        $("#BatchMixCode").change();
        
    });
</script>